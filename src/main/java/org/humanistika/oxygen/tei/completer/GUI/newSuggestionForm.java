/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package org.humanistika.oxygen.tei.completer.GUI;

import org.humanistika.oxygen.tei.completer.SuggestedAutocomplete;
import org.humanistika.oxygen.tei.completer.TeiCompleter;
import org.humanistika.oxygen.tei.completer.configuration.beans.AutoComplete;
import org.jetbrains.annotations.Nullable;
import ro.sync.contentcompletion.xml.CIValue;

import javax.swing.*;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.atomic.AtomicBoolean;

/**
 *
 * @author younes
 */
public class newSuggestionForm extends javax.swing.JDialog {
    private TeiCompleter teiCompleter;
    private SuggestedAutocomplete suggestedAutocomplete = null;

    private ArrayList<SuggestedAutocomplete> results = new ArrayList<>();

    /**
     * Creates new form JDialogForm
     */
    public newSuggestionForm(java.awt.Frame parent, final TeiCompleter teiCompleter) {
        super(parent, ModalityType.DOCUMENT_MODAL);
        this.teiCompleter = teiCompleter;
        initComponents();
        customLabels();
    }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        cancleJButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        dependentJLabel = new javax.swing.JLabel();
        dependentJTextField = new javax.swing.JTextField();
        selectionJLabel = new javax.swing.JLabel();
        selectionJTextField = new javax.swing.JTextField();
        fetchjButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        restultsJTable = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Custom lookup");
        cancleJButton.setText("Cancel");
        cancleJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancleJButtonActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel1.setText("Custom lookup");

        dependentJLabel.setText("Dependent:");
        dependentJLabel.setToolTipText("");

        dependentJTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dependentJTextFieldActionPerformed(evt);
            }
        });

        selectionJLabel.setText("Selection:");

        fetchjButton.setText("Search...");
        fetchjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fetchjButtonActionPerformed(evt);
            }
        });

        restultsJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
            },
            new String [] {
                 "Value", "Description"
            }
        ) {
            Class[] types = new Class [] {
                    java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                 false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        restultsJTable.setColumnSelectionAllowed(true);
        restultsJTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                restultsJTableMousePressed(evt);
            }
        });
        jScrollPane2.setViewportView(restultsJTable);
        restultsJTable.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);

        restultsJTable.setCellSelectionEnabled(false);
        restultsJTable.setRowSelectionAllowed(true);

        restultsJTable.getColumnModel().getColumn(0).setPreferredWidth(120);
        restultsJTable.setAutoResizeMode(JTable.AUTO_RESIZE_LAST_COLUMN);
        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(cancleJButton))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 460, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel1)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addComponent(dependentJLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(dependentJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(16, 16, 16)
                                .addComponent(selectionJLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(selectionJTextField))
                            .addComponent(fetchjButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dependentJLabel)
                    .addComponent(dependentJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(selectionJLabel)
                    .addComponent(selectionJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(8, 8, 8)
                .addComponent(fetchjButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 307, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cancleJButton)
                .addContainerGap())
        );

        selectionJTextField.getDocument().addDocumentListener(new DocumentListener() {
            public void insertUpdate(DocumentEvent e) {
                textChanged();
            }

            public void removeUpdate(DocumentEvent e) {
                textChanged();
            }

            @Override
            public void changedUpdate(DocumentEvent e) {

            }
        });

        dependentJTextField.getDocument().addDocumentListener(new DocumentListener() {
            public void insertUpdate(DocumentEvent e) {
                textChanged();
            }

            public void removeUpdate(DocumentEvent e) {
                textChanged();
            }

            @Override
            public void changedUpdate(DocumentEvent e) {

            }
        });

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cancleJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancleJButtonActionPerformed
        // TODO add your handling code here:
        this.suggestedAutocomplete = null;
        dispose();
    }//GEN-LAST:event_cancleJButtonActionPerformed

    private void dependentJTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dependentJTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_dependentJTextFieldActionPerformed

    private void fetchjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fetchjButtonActionPerformed
        // TODO add your handling code here:

        String selection = selectionJTextField.getText();
        String dependent = dependentJTextField.getText();

        // get the auto complete suggestions based on the user input
        final List<CIValue> suggestions = new ArrayList<>();

        for (final AutoComplete autoComplete : teiCompleter.getConfiguration().getAutoCompletes()) {
            suggestions.addAll(teiCompleter.requestAutoComplete(autoComplete, selection, dependent));
        }

        //get the model to populate the table
        DefaultTableModel model = (DefaultTableModel) restultsJTable.getModel();

        for(int i= 0;i< suggestions.size();i++) {
            results.add(new SuggestedAutocomplete(suggestions.get(i).getValue(), suggestions.get(i).getAnnotation(), new ArrayList<>()));
            model.addRow(new Object[]{suggestions.get(i).getValue(), suggestions.get(i).getAnnotation()});
        }

    }//GEN-LAST:event_fetchjButtonActionPerformed

    private void restultsJTableMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_restultsJTableMousePressed
        // TODO add your handling code here:
        JTable table =(JTable) evt.getSource();
        Point point = evt.getPoint();
        int row = table.rowAtPoint(point);
        if (evt.getClickCount() == 2 && table.getSelectedRow() != -1) {
            // your valueChanged overridden method
            suggestedAutocomplete = results.get(row);
            dispose();
        }

    }//GEN-LAST:event_restultsJTableMousePressed

//    /**
//     * @param args the command line arguments
//     */
//    public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(JDialogForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(JDialogForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(JDialogForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(JDialogForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//
//        /* Create and display the dialog */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                newSuggestionForm dialog = new newSuggestionForm(new javax.swing.JFrame(), true);
//                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
//                    @Override
//                    public void windowClosing(java.awt.event.WindowEvent e) {
//                        System.exit(0);
//                    }
//                });
//                dialog.setVisible(true);
//            }
//        });
//    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancleJButton;
    private javax.swing.JTextField dependentJTextField;
    private javax.swing.JButton fetchjButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable restultsJTable;
    private javax.swing.JLabel selectionJLabel;
    private javax.swing.JLabel dependentJLabel;
    private javax.swing.JTextField selectionJTextField;
    // End of variables declaration//GEN-END:variables

    private AtomicBoolean runningState = new AtomicBoolean(false);

    private void textChanged() {

        // GATE Keeper
        // reject if either fields have less than 4 chars
        // this correspond to requestAutoComplete function as well
         //TODO USE a constant for this value
        if(selectionJTextField.getText().length() < 4) return;
        if(dependentJTextField.getText().length() < 4) return;

        // if we are already fetching results no need to do it again
        if(runningState.compareAndSet(false, true)) {
            //No SwingWorker is running.
            //Create and start swing worker.
            LiveAutoComplete live = new LiveAutoComplete();
            live.execute();
        }
    }

    @Nullable
    public SuggestedAutocomplete getSuggestedAutocomplete() {
        return suggestedAutocomplete;
    }

    private void customLabels() {
        dependentJLabel.setText(this.teiCompleter.getConfiguration().getAutoCompletes().get(0).getDependent().getLabel() + ":");
        selectionJLabel.setText(this.teiCompleter.getConfiguration().getAutoCompletes().get(0).getSelection().getLabel() + ":");
    }

    public class LiveAutoComplete extends SwingWorker {
        List<CIValue> suggestions = new ArrayList<>();
        String selection;
        String dependent;
        @Override
        protected Object doInBackground() throws Exception {

            DefaultTableModel model = (DefaultTableModel) restultsJTable.getModel();
            // clear the old results
            for(int i =0; i < model.getRowCount(); i++) {
                model.removeRow(i);
            }

            // Introduce a delay of 300 milliseconds
            try {
                Thread.sleep(100);
            } catch (InterruptedException e) {
                // Handle interruption if necessary
            }

            // get the text field values after the cooldown
            selection = selectionJTextField.getText();
            dependent = dependentJTextField.getText();

            // get the auto complete suggestions based on the user input
            final List<CIValue> suggestions = new ArrayList<>();

            for (final AutoComplete autoComplete : teiCompleter.getConfiguration().getAutoCompletes()) {
                suggestions.addAll(teiCompleter.requestAutoComplete(autoComplete, selection, dependent));
            }

            this.suggestions.addAll(suggestions);

            return null;
        }

        @Override
        protected void done() {
            // Update UI on EDT when the task is complete
            DefaultTableModel model = (DefaultTableModel) restultsJTable.getModel();

            //populate with the new results
            for(int i= 0;i< suggestions.size();i++) {
                results.add(new SuggestedAutocomplete(suggestions.get(i).getValue(), suggestions.get(i).getAnnotation(), new ArrayList<>()));
                model.addRow(new Object[]{suggestions.get(i).getValue(), suggestions.get(i).getAnnotation()});
                System.out.println(suggestions.get(i).getAnnotation());
            }

            if(suggestions.size() == 0) {
                model.addRow(new Object[]{"No results Matching " + dependent + "+" + selection , ""});
            }

            runningState.set(false);
        }
    }
}
